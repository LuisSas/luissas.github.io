[{"content":"Lo que se busca hacer con este post es hacer una interación entre el usuario y un bot creado apartir de elixir.\nDependencias 1  {:discord_ex, \u0026#34;~\u0026gt; 1.1.18\u0026#34;}   La principal dependecia, la cual nos hara tener una conexión con discord es disord_ex.\nEn mi caso al momento de levantar la aplicación tenía un error de compilación por una de las dependencias que ocupaba discord_ex, para solucionar dicho problema fue tomar una versión más actual de la dependencia fallida y sobreescribirla por una versión que no tuviera ese error, si esto no te llega a pasar no es necesario agregar esta dependencia.\n1  {:hackney, \u0026#34;~\u0026gt;1.16.0\u0026#34;, override: true}   mix.exs\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28  defmodule DiscordElixir.MixProject do use Mix.Project def project do [ app: :discord_elixir, version: \u0026#34;0.1.0\u0026#34;, elixir: \u0026#34;~\u0026gt; 1.8\u0026#34;, build_embedded: Mix.env() == :prod, start_permanent: Mix.env() == :prod, deps: deps() ] end def application do [ applications: [:logger, :discord_ex], mod: {JackbotElixir, []} ] end defp deps do [ {:discord_ex, \u0026#34;~\u0026gt; 1.1.18\u0026#34;}, {:hackney, \u0026#34;~\u0026gt;1.16.0\u0026#34;, override: true} ] end end   Configuración Se necesita tener un toker para poder usar el bot, pero no es recomendable versionar ese token, por lo cual yo lo tomo de una variable de entorno nombrada como DISCORD_TOKEN.\nEn mi caso definí un caracter para poder hablar con el bot, y que solo interactue cuando ese comando esta precente como el primer caracter de la cadena escrita.\nconfig/config.exs\n1 2 3 4  use Mix.Config config :discord_elixir, token: System.get_env(\u0026#34;DISCORD_TOKEN\u0026#34;) config :discord_elixir, discord_prefix: \u0026#34;!\u0026#34;   Aplicación En este caso se agrega un Supervisor junto con un children para poder tener una constante comunicación entre discord y el bot.\nBorre el caso de ejemplo de un hola mundo cuando creas un nuevo proyecto con Mix y agregue la configuración necesaria para cuando se levanta la aplicación.\nlib/discord_elixir.ex\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  defmodule DicordElixir do use Application @moduledoc \u0026#34;\u0026#34;\u0026#34; Documentation for DiscordElixir. \u0026#34;\u0026#34;\u0026#34; def start(_type, _args) do import Supervisor.Spec children = [ worker(DiscordElixir.Manager.Worker, [%{ handler: DiscordElixir.Manager.Worker, token: Application.get_env(:discord_elixir, :token) }]) ] opts = [strategy: :one_for_one, name: DiscordElixir.Supervisor] Supervisor.start_link(children, opts) end end   En este caso declare un archivo llamado Worker, en la ruta de lib/manager, este es el archivo crucial para la conexión entre elixir y discord, ya que va a ser el que va a iniciar el socket con una comunicación continua entre ambos, este archivo se va a encargar de esa comunicación y la deteción de los eventos provenientes de discord.\nlib/manager/worker.ex\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  defmodule DiscordElixir.Manager.Worker do @moduledoc false require Logger alias DiscordElixir.Util.ProcessMessageUtil alias DiscordEx.Client def start_link(otps \\\\ [] ) do Client.start_link(otps) end def handle_event({:message_create, payload}, state) do Logger.info(\u0026#34;Author: #{payload.data[\u0026#34;author\u0026#34;][\u0026#34;username\u0026#34;]}\u0026#34;) if !payload.data[\u0026#34;author\u0026#34;][\u0026#34;bot\u0026#34;] do Task.start(fn -\u0026gt; ProcessMessageUtil.process_message(payload, state) end) end {:ok, state} end def handle_event({_event, _payload}, state) do {:ok, state} end end   A repasar algunas lineas del archivo.\n  Se hace la conexión y es el encargado de recibir el token anteriormente pasado en el archivo de inicio    Es el que se encarga de escuchar los eventos de discord, se recibe un mensaje, el payload que es toda la infomación proveniente de quien escribio el mensaje, cuando, si es un bot o no etc y un state o estado.    Agregue esta validación ya que el bot puede ver y recibir los mensajes de otros bots, en este ejemplo de prueba eso no me interesa, pero para que sepan que se puede tener una comunicación entre bots de una manera muy sencilla.    Mande llamar a archivo de utilidad, para el proceso de todos los mensajes, esto para hacer las llamadas de una forma asincróna.    Por último, declare un archivo llamado ProcessMessageUtil, para poder procesar los mensajes llegados al evento y no tener todo lleno en nuestro archivo de conexión.\nEn este ejemplo solo tendre 2 procesamientos de mensajes, para el comando !hello y para el comando !info.\nlib/util/process_message_util.ex\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31  defmodule DiscordElixir.Util.ProcessMessageUtil do @moduledoc false require Logger alias DiscordEx.Client.Helpers.MessageHelper alias DiscordEx.RestClient.Resources.Channel def process_message(payload, state) do prefix = Application.get_env(:discord_elixir, :discord_prefix) parsed_cmd = MessageHelper.msg_command_parse(payload, prefix) process_command(parsed_cmd, payload, state) end def process_command({\u0026#34;hello\u0026#34;, _}, payload, state) do msg = \u0026#34;Hello #{payload.data[\u0026#34;author\u0026#34;][\u0026#34;username\u0026#34;]}🦎\u0026#34; send_message(msg, payload, state) end def process_command({\u0026#34;info\u0026#34;, _}, payload, state) do msg = \u0026#34;Hi my name is Jackbot, I am a example bot made with Elixir and discord_ex\u0026#34; send_message(msg, payload, state) end def process_command(_, _payload, _state) do :noop end defp send_message(msg, payload, state) do Channel.send_message(state[:rest_client], payload.data[\u0026#34;channel_id\u0026#34;], %{content: msg}) end end   A repasar algunas lineas de código\n  Se obtiene el prefixo escrito en config/config.exs, en este caso !.    La función que se llama de msg_command_parse, recibe uno o 2 parametros, en este caso, cuando tiene un parametro el prefixo por defecto que detecta es \u0026ldquo;!\u0026rdquo;, y con 2 parametros, el segundo es prefixo cualesquiera, en el caso de ejemplo fue \u0026ldquo;!\u0026rdquo;    Se manda llamar la función process_command que se va a encargar de procesar los mensajes aparte de un default, en el cual no se va a mandar mensaje.    Función encargada de mandar mensajes por el Channel a discord. 🤖    Con eso termino este ejemplo, dejo el repositorio de Github y me despido por hoy 🦎.\n","description":"Creación de bot con elixir para discord","id":0,"section":"posts","tags":["Elixir"],"title":"Bot de discord con elixir","uri":"https://jackmortdt.github.io/posts/dicord_bot_elixir/"},{"content":"Vamos a hacer un bot sencillo para discord con la ayuda de spring boot y JDA 🤖\nRequerimientos  JDK8 +  1 2  $ echo $JAVA_HOME /Users/jackmort/.jenv/versions/1.8   Recomiendo instalar Java con jenv que es un manejador de versiones de jdk\n  Editor de código de preferencia\n Vim Visual studio code Sublime IntelliJ    Gradle\n  1 2  $ echo $GRADLE_HOME /Users/jackmort/.sdkman/candidates/gradle/current   Para instalar gradle de una manera fácil se puede hacer con sdkman\nCrear estructura del proyecto Para crear un proyecto nuevo de Spring bot recomiendo ocupar el Springboot Initializr, ya que te genera toda la estructura necesaria para empezar a trabajar.\nDescomprimimos el zip que descargamos y al momento de levantarlo\n1  $ gradle bootRun   Nos descargara algunas dependencias y se vera algo similar a esto\nCon esto tenemos creado nuestro proyecto de spring boot 😎\nCreación de bot Nota: Voy a versionar el proyecto para tener un poco más de orden 😅\nAgregar dependencias necesarias Las dependencias que voy a agregar son estas\n org.springframework.boot:spring-boot-starter-web net.dv8tion:JDA:4.2.0_179  ","description":"Introducción básica a lo que entiendo que es git y la ayuda que puede dar.","id":1,"section":"posts","tags":["Groovy","Spring boot"],"title":"Discord-bot Spring boot y Gradle","uri":"https://jackmortdt.github.io/posts/discord-bot-spring-boot/"},{"content":"Mi nombre es Luis Sastré, soy desarrollador de software desde hace aproximadamente 2 años. 😅\nMi primer acercamiento al mundo laboral fue en una empresa de desarrollo de software llamada Making Devs, en la cual labore por un tiempo aproximado de año y medio; Actualmente me encuentro trabajando en la Escuela Bancaria y Comercial (EBC).\nMe encuentro en el area de desarrollo de dicha escuela, cumpliendo un año en Mayo. 🤔\nHe podido aprender muchas cosas en estos dos lugares, aprender sobre nuevas tecnologias, lidiar con tecnologías que no son lo son, aprender y divertirme de forma amena en estos trabajos.\nEn este blog estare compartiendo\u0026hellip; lo que me anime a compartir 😂.\nEspero que sea del agrado para quienes lo lean o lo vean, como veran no soy la mejor persona expresando lo que ve o sabe, pero hare mi esfuerzo 🥳.\nPD: Por que Jack?\u0026hellip; es el nombre de mi iguana 🥰🦎\n","description":"Contact page","id":2,"section":"","tags":null,"title":"Quién soy","uri":"https://jackmortdt.github.io/about/"},{"content":"Mi nombre es Luis Sastré, soy desarrollador de software desde hace aproximadamente 2 años. 😅\nMi primer acercamiento al mundo laboral fue en una empresa de desarrollo de software llamada Making Devs, en la cual labore por un tiempo aproximado de año y medio; Actualmente me encuentro trabajando en la Escuela Bancaria y Comercial (EBC).\nMe encuentro en el area de desarrollo de dicha escuela, cumpliendo un año en Mayo. 🤔\nHe podido aprender muchas cosas en estos dos lugares, aprender sobre nuevas tecnologias, lidiar con tecnologías que no son lo son, aprender y divertirme de forma amena en estos trabajos.\nEn este blog estare compartiendo\u0026hellip; lo que me anime a compartir 😂.\nEspero que sea del agrado para quienes lo lean o lo vean, como veran no soy la mejor persona expresando lo que ve o sabe, pero hare mi esfuerzo 🥳.\nPD: Por que Jack?\u0026hellip; es el nombre de mi iguana 🥰🦎\n","description":"Contact page","id":3,"section":"","tags":null,"title":"Quién soy","uri":"https://jackmortdt.github.io/contact/"},{"content":"Este articulo ofrece un acercamiento a lo que es Git, lo que es a grandes rasgos y el uso que se le puede dar.\nQué es? Git es un sistema de control de versiones, una herramienta que te permite versionar archivos de texto.\nPero esto para que sirve si hay muchas herramientas que te ayudan a lo mismo? 🤷🏻‍♂️\nPues eso es lo interesante de Git, es una herramienta la cúal tal vez no tiene la curva de aprendizaje mas fácil, pero una vez aprendiendola tiene mucho valor, puedes hacer bastantes cosas con ella y no solo si te dedicas al desarrollo, ocupandola bien puedes sacar un gran provecho.\nComo conoci Git? La conocí hasta que empecé a trabajar en Making Devs, mi primera semana fue estar en un curso-capacitación de Git, me encanto, ya que era mi primer trabajo y estaba aprendiendo algo que llgué a ver una sola vez en la carrera, algo que intentamos usar y como no entendimos lo dejamos en el intento nada más.\nRetormando, en esa semana de curso pude ver no solo conceptos de Git, también el moverme mas libremente por la terminal (Por que aprendí git en la terminal\u0026hellip;).\nY después de esa semana aprendí\u0026hellip; me acuerdo que nos enseño muchas cosas mi antiguo jefe (@neodevelop), pero al final no pase de como agregar archivos, hacer commit y algo muy básico de como hacer merge-branch.\nRecordando lo del curso, nos enseño mucho, ver nuestra historia, explorar nuestro árbol de cambios, mezclar diferentes branch, rebasar 🤯, en esos momentos no entendia nada 😂, tuve que practicar bastante tiempo, el encontrarme con que se pueden ocasionar conflictos si se mueven mismas líneas de mismos archivos\u0026hellip; versionar algunos conflictos ya que no sabía como arreglarlos 🤦🏻‍♂️.\nQué puedes hacer con Git? Como dije al principio, no sabía manejar esta herramienta, se me hacía dificil y algo tediosa, pero no por eso no veía el potencial y la gran ayuda que podia y puede dar, si tan solo la hubiera aprendido en la escuela, todos los proyectos hubieran salido diferente, de una forma mas organizada.\nGit te ayuda a ver los cambios de los archivos y poder manejar esos cambios, pero esto que significa; A grandes rasgos, es como si tuvieras\nversion 1 -\u0026gt;\nversion 1.1 -\u0026gt;\nversion 1.2 -\u0026gt;\nversion 2 -\u0026gt; y así sucesivamente\nEsto lo llegamos a hacer todos en algún momento con trabajos escolares y con varios archivos y documentos; Pero imaginense poder tener una versión nueva de cada archivo que tengamos por cada párrafo, por cada correción de ortografía, por cada espacio añadido entre palabras 🤯.\nEste es el poder que tiene Git, que si bien el proposito para lo que mas se usa es para el versionamiento de código, esto no quiere decir que no pueda usarse para cualquier otro fin que involucre tener un archivo de texto, por ejemplo este blog y todo lo que tiene, esta siendo versionado con Git.\nComó empezar a aprender Git. Si bien no todos tienen esa oportunidad de tener un curso o capacitación y ayuda constante para poder usarla, siempre se puede aprender de su sitio oficial.\nhttps://git-scm.com/\nSu documentación esta explicada de una forma muy amena, vienen ejemplos, explicación de varios conceptos y un libro el cual viene todavía mas detallado, el cual es gratuito! 😬.\nNo solo eso, hay bastantes tutoriales, videos en internet y preguntas frecuentes acerca de como usar esta herramienta.\nConclusión Se que hay mas herramientas que te ayudan al control de versiones (Subversion, Mercual, etc..) no he tenido la oportunidad de usarlos, pero en lo que respecta a Git, se que es algo que me ha ayudado en el ambiente laboral, y en algun que otro trabajo en mi último semestre en la carrera.\nEs una herramienta dificil de aprender, pero hay muchas páginas que te ayudan a aprender y por que no, el iniciar un proyecto de ejemplo que te ayude a ver como moverte entre diferentes puntos de la historia, poder mezclar varios conjuntos de cambios en uno solo, modificar nuestra historia y hasta poder borrar cambios hechos.\nGit es eso que recomiendas aprender aunque sepas que va a ser un camino dificl, aparte de que es muy popular y se ocupa en muchos lugares.\nAlgó mas\u0026hellip; $ mkdir ejemplo $ cd ejemplo $ git init $ ejemplo git:(master) Y así es como empezamos con git 😅\n","description":"Introducción básica a lo que entiendo que es git y la ayuda que puede dar.","id":4,"section":"posts","tags":["Git"],"title":"Qué es Git?","uri":"https://jackmortdt.github.io/posts/que-es-git/"}]