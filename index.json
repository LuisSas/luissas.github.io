[{"content":"Exercism Exercism es una plataforma para hacer ejercicios en varios lenguajes.\nAlgo interesante que ofrece esta plataforma es el como implementan la resolución los ejercicios, haciendo correr los test, en el momento en el que todos pasen, puedes subir tu respuesta.\nEs algo sencillo pero efectivo, te ayuda a ir viendo temas como TDD de una forma amigable.\nVamos a realizar un ejercicio:\nLas instrucciones son\nDado una hebra de DNA, devuelve el complemento RNA(RNA transcription).\nTanto las hembras de DNA como RNA son una secuencia de nucleoides.\nLos 4 nucleoides encontrados que se encuentran en el DNA son adenine (A), cytosine (C), guanine(G) y thymine (T)\n G -\u0026gt; C C -\u0026gt; G T -\u0026gt; A A -\u0026gt; U  Tests Lo que se tiene que probar es lo siguiente.\n1 2 3 4 5  assert RnaTranscription.to_rna(\u0026#39;G\u0026#39;) == \u0026#39;C\u0026#39; assert RnaTranscription.to_rna(\u0026#39;C\u0026#39;) == \u0026#39;G\u0026#39; assert RnaTranscription.to_rna(\u0026#39;T\u0026#39;) == \u0026#39;A\u0026#39; assert RnaTranscription.to_rna(\u0026#39;A\u0026#39;) == \u0026#39;U\u0026#39; assert RnaTranscription.to_rna(\u0026#39;ACGTGGTCTTAA\u0026#39;) == \u0026#39;UGCACCAGAAUU\u0026#39;   Donde se validan todos los casos del DNA incluyendo uno que tiene muchos caracteres.\nCódigo En este caso la propia plataforma te ofrece el código necesario para empezar.\n1 2 3 4 5 6  defmodule RnaTranscription do @spec to_rna([char]) :: [char] def to_rna(dna) do end end   Si corremos los tests nos arrojara un error ya que no se cumple la asersión.\nCon esto vamos a escribir el código para pasar el primer test.\nHay que tener algo en consideración para el código, nosotros estamos trabajando con un char list, no un string, aquí una pequeña diferencia entre ambos.\n1 2 3 4 5 6 7  iex\u0026gt; IO.inspect(\u0026#34;GCTAU\u0026#34;, charlists: true) \u0026#34;GCTAU\u0026#34; \u0026#34;GCTAU\u0026#34; iex\u0026gt; IO.inspect(\u0026#39;GCTAU\u0026#39;, charlists: true) [71, 67, 84, 65, 85] \u0026#39;GCTAU\u0026#39;   Aclarado eso, vamos a comenzar a escribir nuestro código para pasar la primera prueba\n1 2 3 4 5 6 7 8 9 10 11 12  defmodule RnaTranscription do @spec to_rna([char]) :: [char] def to_rna(dna) do for char \u0026lt;- dna do case char do 71 -\u0026gt; 67 end end end end    De acuerdo al ejemplo anterior podemos sacar el valor de cada letra para tener lo siguiente:\n \u0026lsquo;G\u0026rsquo; -\u0026gt; \u0026lsquo;C\u0026rsquo; = 71 -\u0026gt; 67 \u0026lsquo;C\u0026rsquo; -\u0026gt; \u0026lsquo;G\u0026rsquo; = 67 -\u0026gt; 71 \u0026lsquo;T\u0026rsquo; -\u0026gt; \u0026lsquo;A\u0026rsquo; = 84 -\u0026gt; 65 \u0026lsquo;A\u0026rsquo; -\u0026gt; \u0026lsquo;U\u0026rsquo; = 65 -\u0026gt; 85  Entonces, ya que tenemos esto y habiendo pasado la primera prueba con el código anterior, vamos a escribir los demas casos para el problema.\n Con esto ya pasamos los test, pero no me convence al 100, para esto es algo bueno el TDD, podemos ir haciendo refactor a nuestro código sin afectar la funcionalidad del código.\nLo que tenemos que cambiar 1 2 3 4 5 6 7 8 9 10  def to_rna(dna) do for char \u0026lt;- dna do case char do 71 -\u0026gt; 67 67 -\u0026gt; 71 84 -\u0026gt; 65 65 -\u0026gt; 85 end end end   Podemos declarar un mapa como una variable de módulo y mandarlo llamar desde dentro de la iteración.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  defmodule RnaTranscription do @change_map %{ 71 =\u0026gt; 67, 67 =\u0026gt; 71, 84 =\u0026gt; 65, 65 =\u0026gt; 85 } @spec to_rna([char]) :: [char] def to_rna(dna) do for char \u0026lt;- dna, do: @change_map[char] end end   De acuerdo con diferentes benchmarks el for consume más recursos que un Enum.map, entonces vamos a cambiar un poco nuestro código.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  defmodule RnaTranscription do @change_map %{ 71 =\u0026gt; 67, 67 =\u0026gt; 71, 84 =\u0026gt; 65, 65 =\u0026gt; 85 } @spec to_rna([char]) :: [char] def to_rna(dna) do dna |\u0026gt; Enum.map(\u0026amp;change_dna_value/1) end defp change_dna_value(char) do @change_map[char] end end   Y así habremos terminado el ejercicio de RNA Transcription.\n🦎 ","description":"Rna Transcription","id":0,"section":"posts","tags":["Elixir"],"title":"Rna Transcription - Elixir - Exercism","uri":"https://jackmortdt.github.io/posts/rna_transcription/"},{"content":"Pattern Matching Como vincula Elixir valores con variables. 1 2  number = 1 number + 3   La mayoría de los programadores verían el código y dirían.\n\u0026ldquo;Ok, estamos asignando el valor de 1 a la variable de numero y al sumar 3 nos da como resultado 4\u0026rdquo;\nEsto en Elixir es incorrecto. En Elixir el signo de igual (=) no es una asignación. Es una aserción. Esta aserción es verdadera cuando Elixir logra igualar el lado derecho con el lado izquierdo.\nEn Elixir se llama match operator \u0026ldquo;=\u0026rdquo;.\nEn este caso del lado izquierdo tenemos una variable y del lado derecho un valor entero.\n Tenemos que (10 = number), es otra forma de hacer match, y esto pasa en Elixir\npor lo cual no nos arroja una excepción.\nPero continuando con el ejemplo, vemos que tenemos un error, el lado izquierdo no contiene el mismo valor que el lado derecho, ahí es donde nos arroja una excepción ya que es como si estuvieramos haciendo lo siguiente:\n1 2  1 = 10 ** (MatchError) no match of right hand side value: 10   Matches más complejos Una lista puede ser creada con los valores separados por comas entre corchetes\n1 2  [\u0026#34;Jack\u0026#34;, \u0026#34;Luis\u0026#34;, \u0026#34;Enrique\u0026#34;] [\u0026#34;Jack\u0026#34;, [\u0026#34;Luis\u0026#34;, \u0026#34;José\u0026#34;, 123]]   Regresando al match operator\n A su vez podemos tener matches más complejos, como podría ser el siguiente:\n1 2 3  list = [1, 2, [3, 4, 5]] [a, b, c] = list c   En el valor c del match tenemos una lista dentro de la lista, por lo cual la c = [3, 4, 5]\nAl igual, podemos obtener una excepción si el match no se cumple.\n1 2  list = [1, 2, 3] [a, 1, c] = list   Ignorando valores con **_ (Underscore)** Si no necesitamos capturar el valor en un match, podemos usar la variable ( _ ).\nEsta variable actua como un descarte del valor en un pattern match.\n1 2  [1, _, _] = [1, 2, 3] [1, _, _] = [1, \u0026#34;cat\u0026#34;, \u0026#34;dog\u0026#34;]   Variables usadas una vez por Match Al momento de hacer un proceso de match no podemos tener la misma variable más de una vez con diferentes valores\n1 2  [a, a] = [1, 1] [b, b] = [1, 2]   En este caso, el primer ejemplo va a ser un match exitoso ya que el valor de a las dos veces es 1. En caso contrario del segundo ejemplo ya que el valor de b es 1, al momento de intentar hacer el match por segunda vez se esta igualando 1 = 2 lo cual es incorrecto.\nSi lo que quieres es forzar Elixir para usar el valor existente en una variable en el pattern matching se usa el prefijo ^, en Elixir se llama pin operator\n1 2 3  a = 1 a = 2 ^a = 1   Nos arroja un error en el match por que no es el mismo valor del lado derecho como izquierdo.\nEsto funciona de la misma manera si la variable es un componente en el pattern\n Otra forma de ver el signo de igual Joe Armstrong, Creador de Erlang, compara el signo de igual en Erlang al usado en algebra.\nCuando escribes una ecuación como:\n$$\nx = a + 1\n$$\nTu no estas asignado el valor de a + 1 a x. En lugar de eso estas afirmando que las expresiones x y a + 1 tienen el mismo valor. Si conoces el valor de x, puedes tener el valor de a y vice versa.\n","description":"Como vincula Elixir valores con variables","id":1,"section":"posts","tags":["Elixir"],"title":"Vinculación de variables en Elixir","uri":"https://jackmortdt.github.io/posts/how_elixir_matches_variables_to_values/"},{"content":"Lo que se busca hacer con este post es hacer una interación entre el usuario y un bot creado apartir de elixir.\nRequerimientos  Elixir (En este ejemplo se uso la versión 1.8) Erlang (Erlang otp 23)  Crear una nueva aplicación Para crear un nuevo proyecto en elixir, basta con ejecutar el siguiente comando.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  $ mix new new_app * creating README.md * creating .formatter.exs * creating .gitignore * creating mix.exs * creating config * creating config/config.exs * creating lib * creating lib/new_app.ex * creating test * creating test/test_helper.exs * creating test/new_app_test.exs Your Mix project was created successfully. You can use \u0026#34;mix\u0026#34; to compile it, test it, and more: cd new_app mix test Run \u0026#34;mix help\u0026#34; for more commands.   Al ejecutar el comando se te generaran diversos archivos en la carpeta new_app.\nDependencias Una vez el proyecto este creado procederemos a agregar las dependencias necesarias para el ejemplo.\n1  {:discord_ex, \u0026#34;~\u0026gt; 1.1.18\u0026#34;}   La principal dependecia, la cual nos hara tener una conexión con discord es disord_ex.\nEn mi caso al momento de levantar la aplicación tenía un error de compilación por una de las dependencias que ocupaba discord_ex, para solucionar dicho problema fue tomar una versión más actual de la dependencia fallida y sobreescribirla por una versión que no tuviera ese error, si esto no te llega a pasar no es necesario agregar esta dependencia.\n1  {:hackney, \u0026#34;~\u0026gt;1.16.0\u0026#34;, override: true}   mix.exs\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28  defmodule DiscordElixir.MixProject do use Mix.Project def project do [ app: :discord_elixir, version: \u0026#34;0.1.0\u0026#34;, elixir: \u0026#34;~\u0026gt; 1.8\u0026#34;, build_embedded: Mix.env() == :prod, start_permanent: Mix.env() == :prod, deps: deps() ] end def application do [ applications: [:logger, :discord_ex], mod: {JackbotElixir, []} ] end defp deps do [ {:discord_ex, \u0026#34;~\u0026gt; 1.1.18\u0026#34;}, {:hackney, \u0026#34;~\u0026gt;1.16.0\u0026#34;, override: true} ] end end   Configuración Se necesita tener un token para poder usar el bot, pero no es recomendable versionar ese token, por lo cual es recomendable tomarlo de una variable de entorno, en el caso de este ejemplo nombrada como DISCORD_TOKEN.\nSe define un un caracter para poder hablar con el bot, y que solo interactue cuando ese comando esta precente como el primer caracter de la cadena escrita.\nconfig/config.exs\n1 2 3 4  use Mix.Config config :discord_elixir, token: System.get_env(\u0026#34;DISCORD_TOKEN\u0026#34;) config :discord_elixir, discord_prefix: \u0026#34;!\u0026#34;   Aplicación Se agrega un Supervisor junto con un children para poder tener una constante comunicación entre discord y el bot.\nCuando creas un nuevo proyecto con Mix viene un ejemplo y un test de hola mundo, eso no es necesario tenerlo, por lo cual se quita y se agrega la configuración necesaria para la aplicación.\nlib/discord_elixir.ex\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  defmodule DicordElixir do use Application @moduledoc \u0026#34;\u0026#34;\u0026#34; Documentation for DiscordElixir. \u0026#34;\u0026#34;\u0026#34; def start(_type, _args) do import Supervisor.Spec children = [ worker(DiscordElixir.Manager.Worker, [%{ handler: DiscordElixir.Manager.Worker, token: Application.get_env(:discord_elixir, :token) }]) ] opts = [strategy: :one_for_one, name: DiscordElixir.Supervisor] Supervisor.start_link(children, opts) end end   Se declara un archivo llamado Worker, en la ruta de lib/manager, este es el archivo crucial para la conexión entre elixir y discord, ya que va a ser el que va a iniciar el socket con una comunicación continua entre ambos, este archivo se va a encargar de esa comunicación y la deteción de los eventos provenientes de discord.\nlib/manager/worker.ex\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  defmodule DiscordElixir.Manager.Worker do @moduledoc false require Logger alias DiscordElixir.Util.ProcessMessageUtil alias DiscordEx.Client def start_link(otps \\\\ [] ) do Client.start_link(otps) end def handle_event({:message_create, payload}, state) do Logger.info(\u0026#34;Author: #{payload.data[\u0026#34;author\u0026#34;][\u0026#34;username\u0026#34;]}\u0026#34;) if !payload.data[\u0026#34;author\u0026#34;][\u0026#34;bot\u0026#34;] do Task.start(fn -\u0026gt; ProcessMessageUtil.process_message(payload, state) end) end {:ok, state} end def handle_event({_event, _payload}, state) do {:ok, state} end end   A repasar algunas lineas del archivo.\n  Se hace la conexión y es el encargado de recibir el token anteriormente pasado en el archivo de inicio    Es el que se encarga de escuchar los eventos de discord, se recibe un mensaje, el payload que es toda la infomación proveniente de quien escribio el mensaje, cuando, si es un bot o no etc y un estado.    Validación para verificar si el autor del mensaje es un bot o no.    Archivo de utilidad, para el proceso de todos los mensajes, es recomendable trabajarlo de manera asincrona.    Por último, se declara un archivo llamado ProcessMessageUtil, para poder procesar los mensajes llegados al evento y no tener todo lleno en nuestro archivo de conexión.\nEn este ejemplo solo se tienen 2 procesamientos de mensajes, para el comando !hello y para el comando !info.\nlib/util/process_message_util.ex\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31  defmodule DiscordElixir.Util.ProcessMessageUtil do @moduledoc false require Logger alias DiscordEx.Client.Helpers.MessageHelper alias DiscordEx.RestClient.Resources.Channel def process_message(payload, state) do prefix = Application.get_env(:discord_elixir, :discord_prefix) parsed_cmd = MessageHelper.msg_command_parse(payload, prefix) process_command(parsed_cmd, payload, state) end def process_command({\u0026#34;hello\u0026#34;, _}, payload, state) do msg = \u0026#34;Hello #{payload.data[\u0026#34;author\u0026#34;][\u0026#34;username\u0026#34;]}🦎\u0026#34; send_message(msg, payload, state) end def process_command({\u0026#34;info\u0026#34;, _}, payload, state) do msg = \u0026#34;Hi my name is Jackbot, I am a example bot made with Elixir and discord_ex\u0026#34; send_message(msg, payload, state) end def process_command(_, _payload, _state) do :noop end defp send_message(msg, payload, state) do Channel.send_message(state[:rest_client], payload.data[\u0026#34;channel_id\u0026#34;], %{content: msg}) end end   A repasar algunas lineas de código\n  Se obtiene el prefixo escrito en config/config.exs, en este caso !.    La función que se llama de msg_command_parse, recibe uno o 2 parametros, en este caso, cuando tiene un parametro el prefixo por defecto que detecta es \u0026ldquo;!\u0026rdquo;, y con 2 parametros, el segundo es prefixo cualesquiera, en el caso de ejemplo fue \u0026ldquo;!\u0026rdquo;    Se manda llamar la función process_command que se va a encargar de procesar los mensajes aparte de un default, en el cual no se va a mandar mensaje.    Función encargada de mandar mensajes por el Channel a discord. 🤖    Con eso se termina este ejemplo, dejo el repositorio de Github y me despido por hoy 🦎.\n","description":"Creación de bot con elixir para discord","id":2,"section":"posts","tags":["Elixir"],"title":"Bot de discord con elixir","uri":"https://jackmortdt.github.io/posts/discord_bot_elixir/"},{"content":"Vamos a hacer un bot sencillo para discord con la ayuda de spring boot y JDA 🤖\nRequerimientos  JDK8 +  1 2  $ echo $JAVA_HOME /Users/jackmort/.jenv/versions/1.8   Recomiendo instalar Java con jenv que es un manejador de versiones de jdk\n  Editor de código de preferencia\n Vim Visual studio code Sublime IntelliJ    Gradle\n  1 2  $ echo $GRADLE_HOME /Users/jackmort/.sdkman/candidates/gradle/current   Para instalar gradle de una manera fácil se puede hacer con sdkman\nCrear estructura del proyecto Para crear un proyecto nuevo de Spring bot recomiendo ocupar el Springboot Initializr, ya que te genera toda la estructura necesaria para empezar a trabajar.\nDescomprimimos el zip que descargamos y al momento de levantarlo\n1  $ gradle bootRun   Nos descargara algunas dependencias y se vera algo similar a esto\nCon esto tenemos creado nuestro proyecto de spring boot 😎\nCreación de bot Nota: Voy a versionar el proyecto para tener un poco más de orden 😅\nAgregar dependencias necesarias Las dependencias que voy a agregar son estas\n org.springframework.boot:spring-boot-starter-web net.dv8tion:JDA:4.2.0_179  ","description":"Introducción básica a lo que entiendo que es git y la ayuda que puede dar.","id":3,"section":"posts","tags":["Groovy","Spring boot"],"title":"Discord-bot Spring boot y Gradle","uri":"https://jackmortdt.github.io/posts/discord-bot-spring-boot/"},{"content":"Mi nombre es Luis Sastré, soy desarrollador de software desde hace aproximadamente 2 años. 😅\nMi primer acercamiento al mundo laboral fue en una empresa de desarrollo de software llamada Making Devs, en la cual labore por un tiempo aproximado de año y medio; Actualmente me encuentro trabajando en la Escuela Bancaria y Comercial (EBC).\nMe encuentro en el area de desarrollo de dicha escuela, cumpliendo un año en Mayo. 🤔\nHe podido aprender muchas cosas en estos dos lugares, aprender sobre nuevas tecnologias, lidiar con tecnologías que no son lo son, aprender y divertirme de forma amena en estos trabajos.\nEn este blog estare compartiendo\u0026hellip; lo que me anime a compartir 😂.\nEspero que sea del agrado para quienes lo lean o lo vean, como veran no soy la mejor persona expresando lo que ve o sabe, pero hare mi esfuerzo 🥳.\nPD: Por que Jack?\u0026hellip; es el nombre de mi iguana 🥰🦎\n","description":"Contact page","id":4,"section":"","tags":null,"title":"Quién soy","uri":"https://jackmortdt.github.io/about/"},{"content":"Mi nombre es Luis Sastré, soy desarrollador de software desde hace aproximadamente 2 años. 😅\nMi primer acercamiento al mundo laboral fue en una empresa de desarrollo de software llamada Making Devs, en la cual labore por un tiempo aproximado de año y medio; Actualmente me encuentro trabajando en la Escuela Bancaria y Comercial (EBC).\nMe encuentro en el area de desarrollo de dicha escuela, cumpliendo un año en Mayo. 🤔\nHe podido aprender muchas cosas en estos dos lugares, aprender sobre nuevas tecnologias, lidiar con tecnologías que no son lo son, aprender y divertirme de forma amena en estos trabajos.\nEn este blog estare compartiendo\u0026hellip; lo que me anime a compartir 😂.\nEspero que sea del agrado para quienes lo lean o lo vean, como veran no soy la mejor persona expresando lo que ve o sabe, pero hare mi esfuerzo 🥳.\nPD: Por que Jack?\u0026hellip; es el nombre de mi iguana 🥰🦎\n","description":"Contact page","id":5,"section":"","tags":null,"title":"Quién soy","uri":"https://jackmortdt.github.io/contact/"},{"content":"Este articulo ofrece un acercamiento a lo que es Git, lo que es a grandes rasgos y el uso que se le puede dar.\nQué es? Git es un sistema de control de versiones, una herramienta que te permite versionar archivos de texto.\nPero esto para que sirve si hay muchas herramientas que te ayudan a lo mismo? 🤷🏻‍♂️\nPues eso es lo interesante de Git, es una herramienta la cúal tal vez no tiene la curva de aprendizaje mas fácil, pero una vez aprendiendola tiene mucho valor, puedes hacer bastantes cosas con ella y no solo si te dedicas al desarrollo, ocupandola bien puedes sacar un gran provecho.\nComo conoci Git? La conocí hasta que empecé a trabajar en Making Devs, mi primera semana fue estar en un curso-capacitación de Git, me encanto, ya que era mi primer trabajo y estaba aprendiendo algo que llgué a ver una sola vez en la carrera, algo que intentamos usar y como no entendimos lo dejamos en el intento nada más.\nRetormando, en esa semana de curso pude ver no solo conceptos de Git, también el moverme mas libremente por la terminal (Por que aprendí git en la terminal\u0026hellip;).\nY después de esa semana aprendí\u0026hellip; me acuerdo que nos enseño muchas cosas mi antiguo jefe (@neodevelop), pero al final no pase de como agregar archivos, hacer commit y algo muy básico de como hacer merge-branch.\nRecordando lo del curso, nos enseño mucho, ver nuestra historia, explorar nuestro árbol de cambios, mezclar diferentes branch, rebasar 🤯, en esos momentos no entendia nada 😂, tuve que practicar bastante tiempo, el encontrarme con que se pueden ocasionar conflictos si se mueven mismas líneas de mismos archivos\u0026hellip; versionar algunos conflictos ya que no sabía como arreglarlos 🤦🏻‍♂️.\nQué puedes hacer con Git? Como dije al principio, no sabía manejar esta herramienta, se me hacía dificil y algo tediosa, pero no por eso no veía el potencial y la gran ayuda que podia y puede dar, si tan solo la hubiera aprendido en la escuela, todos los proyectos hubieran salido diferente, de una forma mas organizada.\nGit te ayuda a ver los cambios de los archivos y poder manejar esos cambios, pero esto que significa; A grandes rasgos, es como si tuvieras\nversion 1 -\u0026gt;\nversion 1.1 -\u0026gt;\nversion 1.2 -\u0026gt;\nversion 2 -\u0026gt; y así sucesivamente\nEsto lo llegamos a hacer todos en algún momento con trabajos escolares y con varios archivos y documentos; Pero imaginense poder tener una versión nueva de cada archivo que tengamos por cada párrafo, por cada correción de ortografía, por cada espacio añadido entre palabras 🤯.\nEste es el poder que tiene Git, que si bien el proposito para lo que mas se usa es para el versionamiento de código, esto no quiere decir que no pueda usarse para cualquier otro fin que involucre tener un archivo de texto, por ejemplo este blog y todo lo que tiene, esta siendo versionado con Git.\nComó empezar a aprender Git. Si bien no todos tienen esa oportunidad de tener un curso o capacitación y ayuda constante para poder usarla, siempre se puede aprender de su sitio oficial.\nhttps://git-scm.com/\nSu documentación esta explicada de una forma muy amena, vienen ejemplos, explicación de varios conceptos y un libro el cual viene todavía mas detallado, el cual es gratuito! 😬.\nNo solo eso, hay bastantes tutoriales, videos en internet y preguntas frecuentes acerca de como usar esta herramienta.\nConclusión Se que hay mas herramientas que te ayudan al control de versiones (Subversion, Mercual, etc..) no he tenido la oportunidad de usarlos, pero en lo que respecta a Git, se que es algo que me ha ayudado en el ambiente laboral, y en algun que otro trabajo en mi último semestre en la carrera.\nEs una herramienta dificil de aprender, pero hay muchas páginas que te ayudan a aprender y por que no, el iniciar un proyecto de ejemplo que te ayude a ver como moverte entre diferentes puntos de la historia, poder mezclar varios conjuntos de cambios en uno solo, modificar nuestra historia y hasta poder borrar cambios hechos.\nGit es eso que recomiendas aprender aunque sepas que va a ser un camino dificl, aparte de que es muy popular y se ocupa en muchos lugares.\nAlgó mas\u0026hellip; $ mkdir ejemplo $ cd ejemplo $ git init $ ejemplo git:(master) Y así es como empezamos con git 😅\n","description":"Introducción básica a lo que entiendo que es git y la ayuda que puede dar.","id":6,"section":"posts","tags":["Git"],"title":"Qué es Git?","uri":"https://jackmortdt.github.io/posts/que-es-git/"}]