<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Luis Sastré on Luis Sastré</title>
    <link>/</link>
    <description>Recent content in Luis Sastré on Luis Sastré</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2018</copyright>
    <lastBuildDate>Wed, 20 Apr 2016 00:00:00 -0500</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Primeros pasos con Git</title>
      <link>/post/firtsstepswithgit/</link>
      <pubDate>Thu, 03 May 2018 17:11:12 -0500</pubDate>
      
      <guid>/post/firtsstepswithgit/</guid>
      <description>

&lt;h2 id=&#34;que-es-git&#34;&gt;Que es Git?&lt;/h2&gt;

&lt;p&gt;Git es un sistema de control de versiones&amp;hellip; pero que es esto?&lt;/p&gt;

&lt;p&gt;Es un sistema el cual nos permite guardar información y tener un control de los cambios que se vayan haciendo en uno o varios archivos.&lt;/p&gt;

&lt;p&gt;El tener el control de estos archivos permite tener un juego muy importante en la elaboración de proyectos en un equipo ya que al tener el control de la información y de los cambios que va teniendo un proyecto, se puede reciclar información que ya este escrita y permitir tener archivos mas limipios&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/control_git.png&#34; alt=&#34;Git&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;entendiendo-como-trabaja-git&#34;&gt;Entendiendo como trabaja Git&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;/img/areas_git.png&#34; alt=&#34;Git&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;working-directory&#34;&gt;Working directory&lt;/h4&gt;

&lt;p&gt;El working directory o directorio de trabajo es una copia de una versión del proyecto, es donde van ocurriendo todos los cambios o agregaciones de archivos de nuestros archivos en local.&lt;/p&gt;

&lt;h4 id=&#34;staging-area&#34;&gt;Staging Area&lt;/h4&gt;

&lt;p&gt;Es el área de preparación de un archivo o un grupo de archivos de nuestro directorio, este almacena la información que vamos a ser confirmada.&lt;/p&gt;

&lt;h4 id=&#34;local-repo&#34;&gt;Local repo&lt;/h4&gt;

&lt;p&gt;Es nuestro conjunto de archivos (comunmente llamada repositorio) en el cual podemos ver nuestras diferentes versiones de nuestros archivos en nuestro local y asi poder prepararlas para subirlas a un repositorio remoto.&lt;/p&gt;

&lt;h4 id=&#34;remote-repo&#34;&gt;Remote repo&lt;/h4&gt;

&lt;p&gt;Es un repositorio que esta por asi decirlo en la nube y que este contiene la información de un proyecto guardado en cierta plataforma&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/git_repos.jpg&#34; alt=&#34;Git&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Cuando tenemos un proyecto con dos o más personas es aqui en donde entran el juego estas plataformas ya que nos ayudan a colaborar con otras personas sin la necesidad de pasarse los archivos&amp;hellip; o ver quien tiene la versión final del proyecto&lt;/p&gt;

&lt;h3 id=&#34;trabajando-con-git&#34;&gt;Trabajando con Git&lt;/h3&gt;

&lt;p&gt;Hay comandos basicos con los que podemos ir teniendo nuestro proyecto versionado para poder trabajar con el desde cualquier equipo.&lt;/p&gt;

&lt;p&gt;Para poder tener versionado un proyecto con tener &lt;strong&gt;&lt;em&gt;git&lt;/em&gt;&lt;/strong&gt; instalado e iniciandolo en nuestro proyecto es el primer paso&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;➜  gitExample git init
Initialized empty Git repository in /home/jack/gitExample/.git/
➜  gitExample git:(master)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Esto nos genera una carpeta oculta &lt;strong&gt;&lt;em&gt;.git&lt;/em&gt;&lt;/strong&gt; que va a tener lo que necesitamos para trabajar con git&amp;hellip; aunque ahorita no nos meteremos mucho en ello.&lt;/p&gt;

&lt;h4 id=&#34;comando-básicos&#34;&gt;Comando básicos&lt;/h4&gt;

&lt;p&gt;Al tener nuestro directorio versionado se apareceran ya ciertos cambios cuando creemos archivos, borremos archivos o modifiquemos algunos y con el comando &lt;strong&gt;&lt;em&gt;git status&lt;/em&gt;&lt;/strong&gt; podremos ver ese progreso de los archivos&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;➜  gitExample git:(master) ✗ git status
On branch master
Changes not staged for commit:
  (use &amp;quot;git add/rm &amp;lt;file&amp;gt;...&amp;quot; to update what will be committed)
  (use &amp;quot;git checkout -- &amp;lt;file&amp;gt;...&amp;quot; to discard changes in working directory)

        deleted:    Hola.txt
        modified:   Readme.md

Untracked files:
  (use &amp;quot;git add &amp;lt;file&amp;gt;...&amp;quot; to include in what will be committed)

        git.txt

no changes added to commit (use &amp;quot;git add&amp;quot; and/or &amp;quot;git commit -a&amp;quot;)
➜  gitExample git:(master) ✗ 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Como se pueden dar cuenta nos muestra estos archivos, podemos proceder a agregarlos al área de preparación con &lt;strong&gt;&lt;em&gt;git add&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Se pueden añadir a esta área uno a uno los archivos o todos en conjunto&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;➜  gitExample git:(master) ✗ git add .
➜  gitExample git:(master) ✗ git status
On branch master
Changes to be committed:
  (use &amp;quot;git reset HEAD &amp;lt;file&amp;gt;...&amp;quot; to unstage)

        modified:   Readme.md
        renamed:    Hola.txt -&amp;gt; git.txt

➜  gitExample git:(master) ✗ 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Al añadir los archivos a esta área se pueden mandar directo a la siguiente con la que seria de las partes más importantes, el &amp;ldquo;commit&amp;rdquo;, siempre eh oido decir que el commit es lo mas importante y no es para menos ya que lo que hace es pasar a nuestro repo local y preparlo para el remoto.&lt;/p&gt;

&lt;p&gt;Va a tener toda nuestra historia y vamos a poder navegar entre los diferentes Hashes que se generan al hacer el commit, regresarnos a cierta versión de un archivo o grupo de archivos.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;➜  gitExample git:(master) ✗ git commit -m &amp;quot;Agregando mensaje de hola :D&amp;quot;
[master 4b3e65b] Agregando mensaje de hola :D
 2 files changed, 1 insertion(+)
 rename Hola.txt =&amp;gt; git.txt (100%)
➜  gitExample git:(master) git status
On branch master
nothing to commit, working directory clean
➜  gitExample git:(master) 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Para poder ver toda esta historia git proporciona de un log, con varios comandos opcionales despues, pero lo que hacen a grandes rasgos es mostrar nuestra historia.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;➜  gitExample git:(master) git log

commit 4b3e65b63b4e998f2b7383c2a235cb1ba5fb7fb5
Author: LuisSas &amp;lt;luis@makingdevs.com&amp;gt;
Date:   Mon May 7 21:41:32 2018 -0500

    Agregando mensaje de hola :D

commit 0f2c073c7ea42f0d368f692dfa487c595c1c75b8
Author: LuisSas &amp;lt;luis@makingdevs.com&amp;gt;
Date:   Mon May 7 21:31:58 2018 -0500

    Agregando archivos para ejemplo
(END)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;conclusión&#34;&gt;Conclusión&lt;/h4&gt;

&lt;p&gt;Git es una herramienta fantastica para el desarrollo de software, se puede ver toda la historia de un desarrollo de software y el cooperar en un proyecto completo.&lt;/p&gt;

&lt;p&gt;Considero que es una herramienta dificil de aprender en un inicio pero una vez que empiezas a manejarla es algo hermosa.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Pruebas unitarias con Spock</title>
      <link>/post/unittestwithspock/</link>
      <pubDate>Tue, 01 May 2018 20:01:09 -0500</pubDate>
      
      <guid>/post/unittestwithspock/</guid>
      <description>

&lt;p&gt;Spock es un framework de testing para Java y Groovy, hace que los test se escriban de una manera muy facil, clara de leer y saber que van a probar.&lt;/p&gt;

&lt;p&gt;Gracias a que sus pruebas que se dividen en bloques estas se ven descriptivas, ayuda que se puedan entender y añadir propias de manera muy sencilla.&lt;/p&gt;

&lt;p&gt;Gracias a que se ocupa Groovy para las pruebas esto hace que el manejo de estructuras de datos, como listas o mapas se puedan escribir con muy poco código.&lt;/p&gt;

&lt;h3 id=&#34;bloques&#34;&gt;Bloques&lt;/h3&gt;

&lt;p&gt;Gracias al manejo de bloques en spock y que cada uno puede describirse por separado, los test son muy descriptivos en cuanto a que se requiere en cada parte y cuando se ejecuta que&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;class MathSpec extends Specification{
  def &amp;quot;Sum of two numbers&amp;quot;(){
    given:&amp;quot;the first number&amp;quot;
      Integer number1 = 10
    and:&amp;quot;the second number&amp;quot;
      Integer number2 = 20
    when:&amp;quot;The two numbers add up&amp;quot;
      Integer result = number1 + number2
    then:&amp;quot;The expected result&amp;quot;
      result == 30
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Al ejecutar las pruebas se nos muestra cuantos tests fueron, cuantos pasaron y cuantos fallaron&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;JUnit 4 Runner, Tests: 1, Failures: 0, Time: 750
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;data-driven-testing&#34;&gt;Data Driven Testing&lt;/h3&gt;

&lt;p&gt;El framework de spock permite probar un mismo método o estructura varias veces gracias al bloque &lt;strong&gt;&lt;em&gt;where:&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;class MathSpec extends Specification{
  def &amp;quot;Max of this two numbers&amp;quot;(){
  	given:&amp;quot;3 numbers&amp;quot;
  	expect:&amp;quot;the max of this two numbers&amp;quot;
  	  [a, b].max() == c
  	where:
  	a | b | c
  	1 | 2 | 2
  	3 | 5 | 5
  	8 | 1 | 8
  	1 | 9 | 1
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Gracias a su assert &lt;strong&gt;&lt;em&gt;==&lt;/em&gt;&lt;/strong&gt; se nos muestra que caso es el que fallo y por que&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;JUnit 4 Runner, Tests: 1, Failures: 1, Time: 826
Test Failure: Max of two numbers(MathSpec)
Condition not satisfied:

[a, b].max() == c
 |  |  |     |  |
 1  9  9     |  1
             false

        at MathSpec.Max of two numbers(MathSpec.groovy:7)

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Comenzando con CoffeeScript</title>
      <link>/post/beginwithcoffeescript/</link>
      <pubDate>Tue, 01 May 2018 02:42:46 -0500</pubDate>
      
      <guid>/post/beginwithcoffeescript/</guid>
      <description>

&lt;p&gt;Hace poco tiempo estuve en el desarrollo de un sistema informático en el cual toda la parte del front estaba hecho con CoffeeScript, por lo cual tuve la necesidad de aprender un poco hacerca de este maravilloso lenguaje&lt;/p&gt;

&lt;p&gt;CoffeeScript es un transpilador de código, y esto significa, que al momento de compilar, este genera código en javascript.&lt;/p&gt;

&lt;p&gt;El código que esta hecho con CoffeeScript es un código el cual luce bastante bien, es un código que es facil de leer, facil de entender y facil de mantener.&lt;/p&gt;

&lt;h3 id=&#34;instalación&#34;&gt;Instalación&lt;/h3&gt;

&lt;p&gt;CoffeeScript se instala de una manera muy sencilla, lo que tenemos que tener instalado para correrlo en nuestra computadora es lo siguiente:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;node&lt;/li&gt;
&lt;li&gt;npm&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;npm install --general coffeescript
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;uso&#34;&gt;Uso&lt;/h3&gt;

&lt;p&gt;Una vez instalado coffeescript ya podremos hacer uso de este lenguaje, de su shell y ejecutar los comandos disponibles.&lt;/p&gt;

&lt;script src=&#34;https://asciinema.org/a/Y6gJINJfSFpfl9OGjb4LkE4g1.js&#34; id=&#34;asciicast-Y6gJINJfSFpfl9OGjb4LkE4g1&#34; data-size=&#34;small&#34;&gt;&lt;/script&gt;

&lt;h3 id=&#34;compilación&#34;&gt;Compilación&lt;/h3&gt;

&lt;p&gt;Como se pudo observar al tener coffee instalado ya podremos hacer varias cosas, entre las cuales de las mas importantes serian la compilación de nuestros archivos &lt;strong&gt;&lt;em&gt;.coffee&lt;/em&gt;&lt;/strong&gt; a &lt;strong&gt;&lt;em&gt;.js&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&#34;ejemplo-de-archivo-en-coffee&#34;&gt;Ejemplo de archivo en .coffee&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;square = (x) -&amp;gt; x * x
cube = (x) -&amp;gt; square(x) * x
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;archivo-compilado-a-js&#34;&gt;Archivo compilado a .js&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var cube, square;

  square = function(x) {
    return x * x;
  };

  cube = function(x) {
    return square(x) * x;
  };
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ventajas-de-usar-coffeescript&#34;&gt;Ventajas de usar CoffeeScript&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Nos permite trabajar de una forma mas sencilla&lt;/li&gt;
&lt;li&gt;Escribir menos código&lt;/li&gt;
&lt;li&gt;Podemos aprender javascript leyendo el código compilado&lt;/li&gt;
&lt;li&gt;Facil de mantener&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;desventajas-de-coffeescript&#34;&gt;Desventajas de CoffeeScript&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Ya no tiene actualizaciones desde hace tiempo lo que hace que ya no sea soportado por varios frameworks&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
